enum PoolType {
  Weighted
  Stable
  QuantAMMWeighted
  StableSurge
  Gyro2
  GyroE
  LBP
  ReClamm
}

type Factory @entity(immutable: false) {
  "Unique identifier for the Factory"
  id: Bytes!
  "Address of the Factory contract"
  address: Bytes!
  "Type of pools this Factory creates"
  type: PoolType!
  "Version number of the Factory"
  version: Int!
  "Pools created by this Factory"
  pools: [Pool!] @derivedFrom(field: "factory")
}

type WeightedParams @entity(immutable: false) {
  "Unique identifier for the WeightedPoolParams"
  id: Bytes!
  "Token weights for Weighted Pools"
  weights: [BigDecimal!]!
}

type StableParams @entity(immutable: false) {
  "Unique identifier for the StablePoolParams"
  id: Bytes!
  "Amplification parameter for Stable Pools"
  amp: BigInt!
}

type QuantAMMWeightedParams @entity(immutable: false) {
  "Unique identifier for the QuantAMMWeightedParams"
  id: Bytes!
  "Oracle staleness threshold"
  oracleStalenessThreshold: BigInt!
  "Pool registry"
  poolRegistry: BigInt!
  "Lambda values"
  lambda: [BigInt!]!
  "Maximum epsilon value"
  epsilonMax: BigInt!
  "Absolute weight guard rail"
  absoluteWeightGuardRail: BigInt!
  "Maximum trade size ratio"
  maxTradeSizeRatio: BigInt!
  "Update interval"
  updateInterval: BigInt!
  "Weights at the last update interval"
  weightsAtLastUpdateInterval: [BigInt!]!
  "Weight block multipliers"
  weightBlockMultipliers: [BigInt!]!
  "Last update interval time"
  lastUpdateIntervalTime: BigInt!
  "Last interpolation time possible"
  lastInterpolationTimePossible: BigInt!
  "Pool details array"
  details: [QuantAMMWeightedDetail!]! @derivedFrom(field: "pool")
}

type QuantAMMWeightedDetail @entity(immutable: false) {
  id: Bytes!
  category: String!
  name: String!
  type: String!
  value: String!
  pool: QuantAMMWeightedParams!
}

type StableSurgeParams @entity(immutable: false) {
  "Unique identifier for the StableSurgeParams"
  id: Bytes!
  "Amplification parameter"
  amp: BigInt!
  "Maximum surge fee percentage"
  maxSurgeFeePercentage: BigDecimal!
  "Surge threshold percentage"
  surgeThresholdPercentage: BigDecimal!
}

type Gyro2Params @entity(immutable: false) {
  "Unique identifier for the Gyro2Params"
  id: Bytes!
  sqrtAlpha: BigDecimal!
  sqrtBeta: BigDecimal!
}

type GyroEParams @entity(immutable: false) {
  "Unique identifier for the GyroEParams"
  id: Bytes!
  alpha: BigDecimal!
  beta: BigDecimal!
  c: BigDecimal!
  s: BigDecimal!
  lambda: BigDecimal!
  tauAlphaX: BigDecimal!
  tauAlphaY: BigDecimal!
  tauBetaX: BigDecimal!
  tauBetaY: BigDecimal!
  u: BigDecimal!
  v: BigDecimal!
  w: BigDecimal!
  z: BigDecimal!
  dSq: BigDecimal!
}

type LBPParams @entity(immutable: false) {
  "Unique identifier for the LBPParams"
  id: Bytes!
  "Owner of the LBP"
  owner: Bytes!
  "Project token for the LBP"
  projectToken: Bytes!
  "Reserve token for the LBP"
  reserveToken: Bytes!
  "Initial weight of the project token"
  projectTokenStartWeight: BigInt!
  "Initial weight of the reserve token"
  reserveTokenStartWeight: BigInt!
  "Final weight of the project token"
  projectTokenEndWeight: BigInt!
  "Final weight of the reserve token"
  reserveTokenEndWeight: BigInt!
  "Start time of the LBP"
  startTime: BigInt!
  "End time of the LBP"
  endTime: BigInt!
  "Project token swap in blocked"
  isProjectTokenSwapInBlocked: Boolean!
}

type ReClammParams @entity(immutable: false) {
  "Unique identifier for the ReClammParams"
  id: Bytes!
  "The timestamp of the last user interaction"
  lastTimestamp: BigInt!
  "The last virtual balances of the pool"
  lastVirtualBalances: [BigInt!]!
  "Represents how fast the pool can move the virtual balances per day"
  dailyPriceShiftExponent: BigInt!
  "Internal time constant used to update virtual balances (1 - tau)"
  dailyPriceShiftBase: BigInt!
  "The centeredness margin of the pool"
  centerednessMargin: BigInt!
  "The current fourth root price ratio, an interpolation of the price ratio state"
  currentFourthRootPriceRatio: BigInt!
  "The fourth root price ratio at the start of an update"
  startFourthRootPriceRatio: BigInt!
  "The fourth root price ratio at the end of an update"
  endFourthRootPriceRatio: BigInt!
  "The timestamp when the update begins"
  priceRatioUpdateStartTime: BigInt!
  "The timestamp when the update ends"
  priceRatioUpdateEndTime: BigInt!
}

type Pool @entity(immutable: false) {
  "Unique identifier for the Pool"
  id: Bytes!
  "Address of the Pool contract"
  address: Bytes!
  "Factory that created this Pool"
  factory: Factory!
  "Parameters for Weighted pools (null for other pool types)"
  weightedParams: WeightedParams
  "Parameters for Stable pools (null for other pool types)"
  stableParams: StableParams
  "Parameters for StableSurge pools (null for other pool types)"
  stableSurgeParams: StableSurgeParams
  "Parameters for Gyro2 pools (null for other pool types)"
  gyro2Params: Gyro2Params
  "Parameters for GyroE pools (null for other pool types)"
  gyroEParams: GyroEParams
  "Parameters for QuantAMMWeighted pools (null for other pool types)"
  quantAMMWeightedParams: QuantAMMWeightedParams
  "Parameters for LBP pools (null for other pool types)"
  lbpParams: LBPParams
  "Parameters for ReClamm pools (null for other pool types)"
  reClammParams: ReClammParams
}
